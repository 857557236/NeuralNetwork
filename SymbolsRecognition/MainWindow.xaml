<Window x:Class="SymbolsRecognition.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:conv="clr-namespace:SymbolRecognitionLib.Converters;assembly=SymbolRecognitionLib"
        xmlns:oxy="http://oxyplot.org/wpf"
        xmlns:viewModel="clr-namespace:SymbolRecognitionLib.InversionOfControl;assembly=SymbolRecognitionLib"
        xmlns:local="clr-namespace:SymbolsRecognition"
        
        mc:Ignorable="d"
        Title="Symbols Recognition" Height="500" Width="1000">
    <Grid>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="5*"/>
        </Grid.ColumnDefinitions>

        <StackPanel Margin="10">
            <TextBlock Text="Loaded network:" Visibility="{Binding IsNetworkLoaded, Converter={conv:BoolToVisibilityConverter}}"/>
            <TextBlock Text="{Binding LoadedNetworkName}" Margin="0 0 0 10" Visibility="{Binding IsNetworkLoaded, Converter={conv:BoolToVisibilityConverter}}"/>
            <Button Content="Load Neural Net" Margin="0 0 0 10" Command="{Binding LoadNeuralNetwork}"/>
            <Button Content="Save Neural Net" Margin="0 0 0 10" IsEnabled="{Binding IsNetworkLoaded}" Command="{Binding SaveNeuralNetwork}"/>

            <TextBlock Text="Neural network info:" Margin="0 0 0 10" FontSize="14" FontWeight="DemiBold" Visibility="{Binding IsNetworkLoaded, Converter={conv:BoolToVisibilityConverter}}"/>
            <TextBlock Text="Typology:" Visibility="{Binding IsNetworkLoaded, Converter={conv:BoolToVisibilityConverter}}"/>
            <TextBlock Text="{Binding NeuralNetworkTypology}" Margin="0 0 0 5" Visibility="{Binding IsNetworkLoaded, Converter={conv:BoolToVisibilityConverter}}"/>
            <TextBlock Text="Cost function:" Visibility="{Binding IsNetworkLoaded, Converter={conv:BoolToVisibilityConverter}}"/>
            <TextBlock Text="{Binding CostFuncitonName}" Margin="0 0 0 5" Visibility="{Binding IsNetworkLoaded, Converter={conv:BoolToVisibilityConverter}}"/>
            <TextBlock Text="Activation function:" Visibility="{Binding IsNetworkLoaded, Converter={conv:BoolToVisibilityConverter}}"/>
            <TextBlock Text="{Binding ActivationFunctionName}" Margin="0 0 0 5" Visibility="{Binding IsNetworkLoaded, Converter={conv:BoolToVisibilityConverter}}"/>

            <TextBlock Text="Create neural network:" FontSize="14" Margin="0 10 0 10" FontWeight="DemiBold"/>
            <TextBlock Text="Typology:"/>
            <TextBox Text="{Binding NewNeuralNetworkTypology, UpdateSourceTrigger=LostFocus}" Margin="0 5 0 0"/>
        
            <TextBlock Text="Cost Function:"/>
            <ComboBox Margin="0 0 0 10" ItemsSource="{Binding CostFunctions}" SelectedIndex="{Binding ChoseCostFunction}">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock  Text="{Binding Name}"></TextBlock>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>

            <TextBlock Text="Activation Function:"/>
            <ComboBox Margin="0 0 0 10" ItemsSource="{Binding ActivationFunctions}" SelectedIndex="{Binding ChoseActivationFunction}">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock  Text="{Binding Name}"></TextBlock>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>

            <Button Content="Create" IsEnabled="{Binding CanCreateNetwork}" Command="{Binding CreateNeuralNetwork}"/>
        </StackPanel>

        <TabControl x:Name="Tabs" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsEnabled="{Binding IsNetworkLoaded}">
            
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectionChanged">
                    <i:InvokeCommandAction Command="{Binding ChangeTab}" CommandParameter="{Binding ElementName=Tabs, Path=SelectedIndex}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <TabItem Header="Draw Board" DataContext="{Binding CurrentViewModel}">
                <Grid Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="2*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <Border Name="CanvasBorder" BorderThickness="2" BorderBrush="AntiqueWhite">
                        <InkCanvas  Name="Canvas" ResizeEnabled="False" DefaultDrawingAttributes="{Binding Brush}"
                                    MaxWidth="{Binding ActualWidth, ElementName=CanvasBorder}"
                                    MaxHeight="{Binding ActualHeight, ElementName=CanvasBorder}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Loaded">
                                    <i:InvokeCommandAction Command="{Binding OnCanvasLoaded}" CommandParameter="{Binding ElementName=Canvas}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </InkCanvas>
                    </Border>

                    <Grid Grid.Row="1" Margin="0 10 0 0">

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <StackPanel>
                            <RadioButton Content="Brush" IsChecked="{Binding IsBrush}"/>
                            <RadioButton Content="Eraser"/>

                            <Button Content="Process" Width="80" HorizontalAlignment="Left" Margin="0 16 5 5" VerticalContentAlignment="Center" Height="22" Command="{Binding ProcessUserInput}" CommandParameter="{Binding ElementName=Canvas}"/>
                            <TextBlock Text="Result:"/>
                            <TextBox Text="{Binding Output}" IsReadOnly="True"/>
                        </StackPanel>

                        <StackPanel Grid.Column="1">
                            <TextBlock Text="Brush size:"/>
                            <TextBox Width="80" Text="{Binding BrushSize}" HorizontalAlignment="Left"/>

                            <Button Content="Clear Canvas" Width="80" Margin="0 10 0 0" HorizontalAlignment="Left" VerticalContentAlignment="Center" Height="22" Command="{Binding ClearCanvas}" CommandParameter="{Binding ElementName=Canvas}"/>
                        </StackPanel>

                        <StackPanel Grid.Column="2">
                            <CheckBox Content="Show border boxes" IsChecked="{Binding ShowBorderBoxes}"/>
                            <CheckBox x:Name="ClassifyResults" Content="Clasify results" IsChecked="{Binding ClassifyResults}"/>

                            <TextBlock Text="Expected result:" Visibility="{Binding ElementName=ClassifyResults, Path=IsChecked, Converter={conv:BoolToVisibilityConverter}}" Margin="0 10 0 0"/>
                            <TextBox Text="{Binding ExpectedResults}" Visibility="{Binding ElementName=ClassifyResults, Path=IsChecked, Converter={conv:BoolToVisibilityConverter}}"/>

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                
                                <Button Content="Save labeled" Width="80" Margin="0 10 0 0" HorizontalAlignment="Left" Visibility="{Binding ElementName=ClassifyResults, Path=IsChecked, Converter={conv:BoolToVisibilityConverter}}" IsEnabled="{Binding ElementName=LabeledDataCount, Path=Text, Converter={conv:StringIntToBoolConverter}}"/>

                                <StackPanel Grid.Column="1">
                                    <TextBlock Text="Count:" Visibility="{Binding ElementName=ClassifyResults, Path=IsChecked, Converter={conv:BoolToVisibilityConverter}}" Margin="0 10 0 0"/>
                                    <TextBlock Name="LabeledDataCount" Text="{Binding LabeledDataCount}" Visibility="{Binding ElementName=ClassifyResults, Path=IsChecked, Converter={conv:BoolToVisibilityConverter}}" Margin="0 10 0 0"/>
                                </StackPanel>
                            </Grid>
                        </StackPanel>

                    </Grid>
                </Grid>
            </TabItem>

            <TabItem Header="Train Network" DataContext="{Binding CurrentViewModel}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="2.2*"/>
                        <ColumnDefinition Width="2.2*"/>
                        <ColumnDefinition Width="3*"/>
                        <ColumnDefinition Width="3*"/>
                    </Grid.ColumnDefinitions>

                    <StackPanel Margin="5">
                        <Button Content="Load Training Inputs" Margin="0 0 0 5" Command="{Binding LoadTrainingInputs}"/>
                        <TextBlock Text="{Binding TrainingInputsFileName}" Margin="0 0 0 5"/>
                        
                        <TextBlock Text="Training data count"/>
                        <TextBox Text="{Binding TrainingDataCount}" Margin="0 0 0 5"/>

                        <TextBlock Text="Lerning rate:"/>
                        <TextBox Margin="0 0 0 5" Text="{Binding LearningRate}"/>

                        <TextBlock Text="Training batch size:"/>
                        <TextBox Margin="0 0 0 5" Text="{Binding MiniBatchSize}"/>

                        <CheckBox Content="Monitor Train. Accuracy" IsChecked="{Binding MonitorTrainingAccuracy}"/>

                        <CheckBox Name="TestDataCheckbox" Content="Use Testing Data" Margin="0 5 0 5" IsChecked="{Binding UseTestingData}"/>

                        <Button Content="Load Training Inputs" Command="{Binding LoadTestingInputs}" Visibility="{Binding ElementName=TestDataCheckbox, Path=IsChecked, Converter={conv:BoolToVisibilityConverter}}"/>
                        <TextBlock Text="{Binding TestingInputsFileName}" Margin="0 0 0 5" Visibility="{Binding ElementName=TestDataCheckbox, Path=IsChecked, Converter={conv:BoolToVisibilityConverter}}"/>

                        <TextBlock Text="Testing data count" Visibility="{Binding ElementName=TestDataCheckbox, Path=IsChecked, Converter={conv:BoolToVisibilityConverter}}"/>
                        <TextBox Text="{Binding TestingDataCount}" Margin="0 0 0 5" Visibility="{Binding ElementName=TestDataCheckbox, Path=IsChecked, Converter={conv:BoolToVisibilityConverter}}"/>
                        
                        <Button Content="Train" Margin="0 0 0 10" Command="{Binding Train}" IsEnabled="{Binding TrainActive}"/>
                        <Button Content="Cancel" Margin="0 0 0 10" Command="{Binding CancelTraining}" IsEnabled="{Binding IsTrainingInTheProcess}"/>
                    </StackPanel>

                    <StackPanel Margin="5" Grid.Column="1">
                        <Button Content="Load Training Labes" Command="{Binding LoadTrainingLabels}" Margin="0 0 0 5"/>
                        <TextBlock Text="{Binding TrainingLabelsFileName}" Margin="0 0 0 5"/>
                        
                        <TextBlock Text="Generations:"/>
                        <TextBox Margin="0 0 0 5" Text="{Binding Generations}"/>

                        <TextBlock Text="Regularization factor:"/>
                        <TextBox Margin="0 0 0 5" Text="{Binding RegularizationFactor}"/>

                        <TextBlock Text="Accuracy threshold:"/>
                        <TextBox Margin="0 0 0 5" Text="{Binding AccuracyTolerance}"/>

                        <CheckBox Content="Monitor Train. Cost" IsChecked="{Binding MonitorTrainingCost}"/>

                        <Button Content="Load Training Labes" Margin="0 25 0 0" Command="{Binding LoadTestingLabels}" Visibility="{Binding ElementName=TestDataCheckbox, Path=IsChecked, Converter={conv:BoolToVisibilityConverter}}"/>
                        <TextBlock Text="{Binding TestingLabelsFileName}" Margin="0 0 0 5" Visibility="{Binding ElementName=TestDataCheckbox, Path=IsChecked, Converter={conv:BoolToVisibilityConverter}}"/>

                        <CheckBox Content="Monitor Test. Cost" Visibility="{Binding ElementName=TestDataCheckbox, Path=IsChecked, Converter={conv:BoolToVisibilityConverter}}" IsChecked="{Binding MonitorTestingCost}"/>
                        <CheckBox Content="Monitor Test. Accuracy" Margin="0 0 0 5" Visibility="{Binding ElementName=TestDataCheckbox, Path=IsChecked, Converter={conv:BoolToVisibilityConverter}}" IsChecked="{Binding MonitorTestingAccuracy}"/>
                    
                        <Button Content="Clear Graphs" Margin="0 5 0 10" Command="{Binding ClearGraphs}" IsEnabled="{Binding IsTrainingInTheProcess, Converter={conv:BoolInverser}}"/>
                        <Button Content="Restore last version" Command="{Binding RestoreLastNetVersion}" IsEnabled="{Binding IsTrainingInTheProcess, Converter={conv:BoolInverser}}"/>

                    </StackPanel>

                    <ProgressBar Grid.Column="2" Grid.ColumnSpan="2" Height="20" Value="{Binding TrainingProgress}" VerticalAlignment="Bottom" Panel.ZIndex="2"/>

                    <Grid Grid.Column="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="20"/>
                        </Grid.RowDefinitions>

                        <oxy:PlotView Model="{Binding TrainingDataAccuracy}" />
                        <oxy:PlotView Model="{Binding TrainingDataCost}" Grid.Row="1"/>

                    </Grid>

                    <Grid Grid.Column="3">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="20"/>
                        </Grid.RowDefinitions>

                        <oxy:PlotView Model="{Binding TestingDataAccuracy}" />
                        <oxy:PlotView Model="{Binding TestingDataCost}" Grid.Row="1"/>
                    </Grid>
                </Grid>
            </TabItem>

        </TabControl>
    </Grid>
</Window>
